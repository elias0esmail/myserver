#!/data/data/com.termux/files/usr/bin/bash

# ----------- Colors -----------
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# ----------- Paths (Termux) -----------
APACHE_DIR="$PREFIX/etc/apache2"
SSL_CONF="$APACHE_DIR/extra/httpd-ssl.conf"
SSL_CERT="$APACHE_DIR/server.crt"
SSL_KEY="$APACHE_DIR/server.key"
DOC_ROOT="/data/data/com.termux/files/home/storage/shared/htdocs"

# ----------- Backup Settings -----------
BACKUP_DIR="$HOME/myserver_backups"
HTDOCS_DIR="/data/data/com.termux/files/home/storage/shared/htdocs"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
BACKUP_PATH="$BACKUP_DIR/$TIMESTAMP"

# ----------- Update Settings -----------
REPO_OWNER="elias0esmail"
REPO_NAME="myserver"
CURRENT_VERSION="1.0.0"
REPO_URL="https://github.com/${REPO_OWNER}/${REPO_NAME}.git"

# ----------- Functions -----------
check_status() {
    # Reset statuses
    apache_status="${RED}Inactive${NC}"
    php_status="${RED}Inactive${NC}"
    mariadb_status="${RED}Inactive${NC}"

    # Check Apache
    if pgrep httpd >/dev/null; then
        apache_status="${GREEN}Active${NC}"
        [ -f "$APACHE_DIR/httpd.conf" ] && grep -q "php_module" "$APACHE_DIR/httpd.conf" \
            && php_status="${GREEN}Active${NC}"
    fi

    # Check MariaDB
    if pgrep mariadbd >/dev/null && mysqladmin ping &>/dev/null; then
        mariadb_status="${GREEN}Active${NC}"
    fi

    show_status
}

show_status() {
    echo -e "${BLUE}=== Server Status ===${NC}"
    echo -e "Apache:    $apache_status"
    echo -e "PHP:       $php_status"
    echo -e "MariaDB:   $mariadb_status"
    echo -e "=====================${NC}"
}

check_cert_expiry() {
    [ ! -f "$SSL_CERT" ] && return 1
    expiry_date=$(openssl x509 -enddate -noout -in "$SSL_CERT" | cut -d= -f2)
    expiry_epoch=$(date -d "$expiry_date" +%s 2>/dev/null || date -j -f "%b %d %T %Y %Z" "$expiry_date" +%s)
    [ $(( $(date +%s) - expiry_epoch )) -lt 2592000 ] && return 1 || return 0
}

renew_ssl_cert() {
    echo -e "${YELLOW}Creating new SSL certificate...${NC}"
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout "$SSL_KEY" -out "$SSL_CERT" \
        -subj "/C=XX/ST=XX/L=XX/O=XX/CN=localhost" &>/dev/null
    [ $? -eq 0 ] && echo -e "${GREEN}Certificate renewed!${NC}" || echo -e "${RED}Certificate renewal failed!${NC}"
}

start_ssl() {
    check_cert_expiry || renew_ssl_cert || return 1
    apachectl stop &>/dev/null
    apachectl start
    mysqld_safe &>/dev/null &
    sleep 2
    termux-open-url "https://localhost:8443/"
    echo -e "${GREEN}Server started on 8443${NC}"
}

start_normal() {
    apachectl stop &>/dev/null
    apachectl start
    mysqld_safe &>/dev/null &
    sleep 2
    termux-open-url "http://localhost:8080/"
    echo -e "${GREEN}Server started on 8080${NC}"
}

stop_services() {
    echo -e "${YELLOW}Stopping server...${NC}"
    apachectl stop
    pkill -x mysqld
    pkill -15 mariadbd
    sleep 2
    echo -e "${GREEN}Server stopped!${NC}"
}

uninstall_server() {
    clear
    echo -e "${RED}==================================="
    echo -e "        UNINSTALL MYSERVER         "
    echo -e "===================================${NC}"
    read -p "Are you sure? [y/N] " choice
    
    case "$choice" in
        y|Y)
            stop_services
            pkg remove -y php-apache mariadb composer openssl-tool wget
            rm -rf "$PREFIX/bin/myserver" "/sdcard/htdocs" "$HOME/storage/shared/htdocs"
            echo -e "${GREEN}Uninstallation completed!${NC}"
            ;;
        *)
            echo -e "${GREEN}Operation canceled.${NC}"
            return 1
            ;;
    esac
}

create_mysql_backup() {
    echo -e "${CYAN}» MySQL Backup Setup «${NC}"
    read -p "MySQL User: " MYSQL_USER
    read -s -p "MySQL Password: " MYSQL_PASS
    echo
    
    mkdir -p "$BACKUP_PATH" || {
        echo -e "${RED}Failed to create backup directory!${NC}"
        return 1
    }

    if ! mysqldump --user="$MYSQL_USER" --password="$MYSQL_PASS" --all-databases > "$BACKUP_PATH/full_backup.sql"; then
        echo -e "${RED}Database backup failed!${NC}"
        rm -rf "$BACKUP_PATH"
        return 1
    fi

    tar czf "$BACKUP_PATH/htdocs_backup.tar.gz" --exclude="phpmyadmin" -C "$HTDOCS_DIR/.." "$(basename "$HTDOCS_DIR")" || {
        echo -e "${RED}Files backup failed!${NC}"
        rm -rf "$BACKUP_PATH"
        return 1
    }

    echo -e "${GREEN}Backup created successfully!${NC}"
    echo -e "Path: ${CYAN}$BACKUP_PATH${NC}"
}

check_for_updates() {
    command -v git &>/dev/null || {
        echo -e "${RED}Install git first: pkg install git${NC}"
        return 1
    }

    local latest_version=$(git ls-remote --tags "$REPO_URL" | awk -F/ '{print $3}' | sort -V | tail -n1 | sed 's/\^{}//')
    [ -z "$latest_version" ] && {
        echo -e "${RED}Failed to fetch versions!${NC}"
        return 1
    }

    if [[ "$latest_version" == "$CURRENT_VERSION" ]]; then
        echo -e "${GREEN}You're up-to-date (v$CURRENT_VERSION)${NC}"
        return 0
    else
        echo -e "${YELLOW}New version available: $latest_version${NC}"
        return 2
    fi
}

main_menu() {
    while true; do
        clear
        echo -e "${CYAN}==== MyServer Manager ====${NC}"
        check_status
        
        echo -e "${YELLOW}1. Start HTTP Server"
        echo "2. Start HTTPS Server"
        echo "3. Stop Server"
        echo "4. Check Updates"
        echo "5. Uninstall"
        echo "0. Exit"
        echo -e "===========================${NC}"
        
        read -p "Choice: " choice
        
        case $choice in
            1) start_normal ;;
            2) start_ssl ;;
            3) stop_services ;;
            4) check_for_updates ;;
            5) uninstall_server ;;
            0) stop_services; exit 0 ;;
            *) echo -e "${RED}Invalid choice!${NC}"; sleep 1 ;;
        esac
    done
}

# Start Program
main_menu